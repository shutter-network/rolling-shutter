// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package env

import (
	"errors"
	"fmt"
)

const (
	// EnvironmentProduction is a Environment of type Production.
	EnvironmentProduction Environment = iota
	// EnvironmentStaging is a Environment of type Staging.
	EnvironmentStaging
	// EnvironmentLocal is a Environment of type Local.
	EnvironmentLocal
)

var ErrInvalidEnvironment = errors.New("not a valid Environment")

const _EnvironmentName = "productionstaginglocal"

var _EnvironmentMap = map[Environment]string{
	EnvironmentProduction: _EnvironmentName[0:10],
	EnvironmentStaging:    _EnvironmentName[10:17],
	EnvironmentLocal:      _EnvironmentName[17:22],
}

// String implements the Stringer interface.
func (x Environment) String() string {
	if str, ok := _EnvironmentMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Environment(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Environment) IsValid() bool {
	_, ok := _EnvironmentMap[x]
	return ok
}

var _EnvironmentValue = map[string]Environment{
	_EnvironmentName[0:10]:  EnvironmentProduction,
	_EnvironmentName[10:17]: EnvironmentStaging,
	_EnvironmentName[17:22]: EnvironmentLocal,
}

// ParseEnvironment attempts to convert a string to a Environment.
func ParseEnvironment(name string) (Environment, error) {
	if x, ok := _EnvironmentValue[name]; ok {
		return x, nil
	}
	return Environment(0), fmt.Errorf("%s is %w", name, ErrInvalidEnvironment)
}

// MarshalText implements the text marshaller method.
func (x Environment) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Environment) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseEnvironment(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
