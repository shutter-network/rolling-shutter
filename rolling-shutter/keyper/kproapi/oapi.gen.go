// Package kproapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package kproapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// DecryptionKey defines model for DecryptionKey.
type DecryptionKey string

// DecryptionTrigger defines model for DecryptionTrigger.
type DecryptionTrigger struct {
	BlockNumber int    `json:"block_number"`
	EpochId     string `json:"epoch_id"`
}

// Eon defines model for Eon.
type Eon struct {
	ActivationBlockNumber int    `json:"activation_block_number"`
	EonKey                string `json:"eon_key"`
	Finished              bool   `json:"finished"`
	Index                 int    `json:"index"`
	Successful            bool   `json:"successful"`
}

// Eons defines model for Eons.
type Eons []Eon

// EpochID defines model for EpochID.
type EpochID string

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// SubmitDecryptionTriggerJSONBody defines parameters for SubmitDecryptionTrigger.
type SubmitDecryptionTriggerJSONBody DecryptionTrigger

// SubmitDecryptionTriggerJSONRequestBody defines body for SubmitDecryptionTrigger for application/json ContentType.
type SubmitDecryptionTriggerJSONRequestBody SubmitDecryptionTriggerJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /decryptionKey/{eon}/{epochID})
	GetDecryptionKey(w http.ResponseWriter, r *http.Request, eon int, epochID EpochID)

	// (POST /decryptionTrigger)
	SubmitDecryptionTrigger(w http.ResponseWriter, r *http.Request)

	// (GET /eons)
	GetEons(w http.ResponseWriter, r *http.Request)

	// (GET /ping)
	Ping(w http.ResponseWriter, r *http.Request)

	// (POST /shutdown)
	Shutdown(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetDecryptionKey operation middleware
func (siw *ServerInterfaceWrapper) GetDecryptionKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "eon" -------------
	var eon int

	err = runtime.BindStyledParameter("simple", false, "eon", chi.URLParam(r, "eon"), &eon)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eon", Err: err})
		return
	}

	// ------------- Path parameter "epochID" -------------
	var epochID EpochID

	err = runtime.BindStyledParameter("simple", false, "epochID", chi.URLParam(r, "epochID"), &epochID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "epochID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDecryptionKey(w, r, eon, epochID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// SubmitDecryptionTrigger operation middleware
func (siw *ServerInterfaceWrapper) SubmitDecryptionTrigger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubmitDecryptionTrigger(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetEons operation middleware
func (siw *ServerInterfaceWrapper) GetEons(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEons(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Ping(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Shutdown operation middleware
func (siw *ServerInterfaceWrapper) Shutdown(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Shutdown(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/decryptionKey/{eon}/{epochID}", wrapper.GetDecryptionKey)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/decryptionTrigger", wrapper.SubmitDecryptionTrigger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/eons", wrapper.GetEons)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ping", wrapper.Ping)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/shutdown", wrapper.Shutdown)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xV32vjRhD+V5bpQV8US/eDQvV2JaGYUjhI3tI0rKWRtRdpdrs7ysUY/e9lVnIs23Ku",
	"OXpwT15rd+ab75tfWyhs6ywhcYB8C6GosdXxeImF3zg2lv7AjXxwmhk9QQ5/Z0+32cWv+qK62779pX8D",
	"CfDGIeQQ2BtaQ59MzG+8Wa/RRxfeOvRsMCKsGls83FPXrobb1pBpuxby7NmfIUax7RNAZ4v63pSvDaVP",
	"wOM/nfFYQn67d5Mc4t89G9rVZyxYIK8snUatCzaPWojdv5KApfuHb5GyMmRCjZH5eLmytkFNcmuoxKev",
	"o4euKDCEqmvm3ByJNPhMznLdk5lEd4BxRs6ooGFs4+GNxwpy+CndF2E6VmAq2vfPTrT3ehN9SPqWl68X",
	"8cp7O1ODhS1RfivrW82DZO/fwZyCLYag1ziR70yJRZ/796dS9DFtlR0CINYFy5F0G73WnRC7IOQv1j9A",
	"Ap1vIIea2eVpOl4vxutUQisxFN7EboMcbmoT1PBphUFxjcrbpjG0VqPxz0E94MahVx8/LSGBxhRIASdB",
	"/Lm8ifIbbuTvkf1oDQk8og8DarZ4u8jExjok7Qzk8H6RLTJIJFN1VDstp0Ml3aKlPt3ikNNeXqwxSnFI",
	"6HfkyGJvLQGoynqlSUVztbyECO1juS7LwexwiEkkXrfI6APkt8cwV5aUreaQ2CoJTLIGeaQDyU4ptATT",
	"/LPvMBkH6dfask9OYhjJfEsgY2u8FMyLHTfa9/2duAjOUhia5F2W7UoVKeZHO9eYIkqdfg7DmPxvKIcZ",
	"ia1wXL3HrKWoPmQfTusCpaeVmVWq1kGRZbVCJLVGksLAUm2Qh4apdNfw/8ZqmC4zbDrCJ4eFQOPuTZ9M",
	"G2G6Hm2Yqf7xwTHBkZP8nTbCSRdcd6vW8Ok6HsoEA/9my813SO8OZ0aUj1MuPNILDgtTbWTKDB2tqVRx",
	"66jnrXNY2P18mR5ijTvph0g6jgvw7JCTpSB7SHTRK9ux0k2jAmvPWP5FcxMuLtXv2K/R/wzH5Uuhqsj0",
	"R5DcyYI+J/knQ+thPwb0j+hnFJYnh/JS1zTRtezC0n6h8517XXes5MkeYy6L1ztHMzh9/28AAAD//7Q+",
	"y/GjCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
