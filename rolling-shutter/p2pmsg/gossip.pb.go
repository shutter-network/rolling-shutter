// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: gossip.proto

package p2pmsg

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DecryptionTrigger struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	InstanceId       uint64                 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	IdentityPreimage []byte                 `protobuf:"bytes,2,opt,name=identity_preimage,json=identityPreimage,proto3" json:"identity_preimage,omitempty"`
	BlockNumber      uint64                 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TransactionsHash []byte                 `protobuf:"bytes,4,opt,name=transactions_hash,json=transactionsHash,proto3" json:"transactions_hash,omitempty"`
	Signature        []byte                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DecryptionTrigger) Reset() {
	*x = DecryptionTrigger{}
	mi := &file_gossip_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecryptionTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptionTrigger) ProtoMessage() {}

func (x *DecryptionTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptionTrigger.ProtoReflect.Descriptor instead.
func (*DecryptionTrigger) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{0}
}

func (x *DecryptionTrigger) GetInstanceId() uint64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *DecryptionTrigger) GetIdentityPreimage() []byte {
	if x != nil {
		return x.IdentityPreimage
	}
	return nil
}

func (x *DecryptionTrigger) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *DecryptionTrigger) GetTransactionsHash() []byte {
	if x != nil {
		return x.TransactionsHash
	}
	return nil
}

func (x *DecryptionTrigger) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type KeyShare struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	IdentityPreimage []byte                 `protobuf:"bytes,1,opt,name=identity_preimage,json=identityPreimage,proto3" json:"identity_preimage,omitempty"`
	Share            []byte                 `protobuf:"bytes,2,opt,name=share,proto3" json:"share,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *KeyShare) Reset() {
	*x = KeyShare{}
	mi := &file_gossip_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyShare) ProtoMessage() {}

func (x *KeyShare) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyShare.ProtoReflect.Descriptor instead.
func (*KeyShare) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{1}
}

func (x *KeyShare) GetIdentityPreimage() []byte {
	if x != nil {
		return x.IdentityPreimage
	}
	return nil
}

func (x *KeyShare) GetShare() []byte {
	if x != nil {
		return x.Share
	}
	return nil
}

type GnosisDecryptionKeySharesExtra struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slot          uint64                 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	TxPointer     uint64                 `protobuf:"varint,2,opt,name=tx_pointer,json=txPointer,proto3" json:"tx_pointer,omitempty"`
	Signature     []byte                 `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GnosisDecryptionKeySharesExtra) Reset() {
	*x = GnosisDecryptionKeySharesExtra{}
	mi := &file_gossip_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GnosisDecryptionKeySharesExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnosisDecryptionKeySharesExtra) ProtoMessage() {}

func (x *GnosisDecryptionKeySharesExtra) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnosisDecryptionKeySharesExtra.ProtoReflect.Descriptor instead.
func (*GnosisDecryptionKeySharesExtra) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{2}
}

func (x *GnosisDecryptionKeySharesExtra) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *GnosisDecryptionKeySharesExtra) GetTxPointer() uint64 {
	if x != nil {
		return x.TxPointer
	}
	return 0
}

func (x *GnosisDecryptionKeySharesExtra) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ShutterServiceDecryptionKeySharesExtra struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signature     []byte                 `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShutterServiceDecryptionKeySharesExtra) Reset() {
	*x = ShutterServiceDecryptionKeySharesExtra{}
	mi := &file_gossip_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutterServiceDecryptionKeySharesExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutterServiceDecryptionKeySharesExtra) ProtoMessage() {}

func (x *ShutterServiceDecryptionKeySharesExtra) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutterServiceDecryptionKeySharesExtra.ProtoReflect.Descriptor instead.
func (*ShutterServiceDecryptionKeySharesExtra) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{3}
}

func (x *ShutterServiceDecryptionKeySharesExtra) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type OptimismDecryptionKeySharesExtra struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptimismDecryptionKeySharesExtra) Reset() {
	*x = OptimismDecryptionKeySharesExtra{}
	mi := &file_gossip_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptimismDecryptionKeySharesExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimismDecryptionKeySharesExtra) ProtoMessage() {}

func (x *OptimismDecryptionKeySharesExtra) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimismDecryptionKeySharesExtra.ProtoReflect.Descriptor instead.
func (*OptimismDecryptionKeySharesExtra) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{4}
}

type DecryptionKeyShares struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	InstanceId  uint64                 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Eon         uint64                 `protobuf:"varint,4,opt,name=eon,proto3" json:"eon,omitempty"`
	KeyperIndex uint64                 `protobuf:"varint,5,opt,name=keyper_index,json=keyperIndex,proto3" json:"keyper_index,omitempty"`
	Shares      []*KeyShare            `protobuf:"bytes,9,rep,name=shares,proto3" json:"shares,omitempty"`
	// Types that are valid to be assigned to Extra:
	//
	//	*DecryptionKeyShares_Gnosis
	//	*DecryptionKeyShares_Optimism
	//	*DecryptionKeyShares_Service
	Extra         isDecryptionKeyShares_Extra `protobuf_oneof:"extra"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecryptionKeyShares) Reset() {
	*x = DecryptionKeyShares{}
	mi := &file_gossip_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecryptionKeyShares) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptionKeyShares) ProtoMessage() {}

func (x *DecryptionKeyShares) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptionKeyShares.ProtoReflect.Descriptor instead.
func (*DecryptionKeyShares) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{5}
}

func (x *DecryptionKeyShares) GetInstanceId() uint64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *DecryptionKeyShares) GetEon() uint64 {
	if x != nil {
		return x.Eon
	}
	return 0
}

func (x *DecryptionKeyShares) GetKeyperIndex() uint64 {
	if x != nil {
		return x.KeyperIndex
	}
	return 0
}

func (x *DecryptionKeyShares) GetShares() []*KeyShare {
	if x != nil {
		return x.Shares
	}
	return nil
}

func (x *DecryptionKeyShares) GetExtra() isDecryptionKeyShares_Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *DecryptionKeyShares) GetGnosis() *GnosisDecryptionKeySharesExtra {
	if x != nil {
		if x, ok := x.Extra.(*DecryptionKeyShares_Gnosis); ok {
			return x.Gnosis
		}
	}
	return nil
}

func (x *DecryptionKeyShares) GetOptimism() *OptimismDecryptionKeySharesExtra {
	if x != nil {
		if x, ok := x.Extra.(*DecryptionKeyShares_Optimism); ok {
			return x.Optimism
		}
	}
	return nil
}

func (x *DecryptionKeyShares) GetService() *ShutterServiceDecryptionKeySharesExtra {
	if x != nil {
		if x, ok := x.Extra.(*DecryptionKeyShares_Service); ok {
			return x.Service
		}
	}
	return nil
}

type isDecryptionKeyShares_Extra interface {
	isDecryptionKeyShares_Extra()
}

type DecryptionKeyShares_Gnosis struct {
	Gnosis *GnosisDecryptionKeySharesExtra `protobuf:"bytes,10,opt,name=gnosis,proto3,oneof"`
}

type DecryptionKeyShares_Optimism struct {
	Optimism *OptimismDecryptionKeySharesExtra `protobuf:"bytes,11,opt,name=optimism,proto3,oneof"`
}

type DecryptionKeyShares_Service struct {
	Service *ShutterServiceDecryptionKeySharesExtra `protobuf:"bytes,12,opt,name=service,proto3,oneof"`
}

func (*DecryptionKeyShares_Gnosis) isDecryptionKeyShares_Extra() {}

func (*DecryptionKeyShares_Optimism) isDecryptionKeyShares_Extra() {}

func (*DecryptionKeyShares_Service) isDecryptionKeyShares_Extra() {}

type Key struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	IdentityPreimage []byte                 `protobuf:"bytes,1,opt,name=identity_preimage,json=identityPreimage,proto3" json:"identity_preimage,omitempty"`
	Key              []byte                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Key) Reset() {
	*x = Key{}
	mi := &file_gossip_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{6}
}

func (x *Key) GetIdentityPreimage() []byte {
	if x != nil {
		return x.IdentityPreimage
	}
	return nil
}

func (x *Key) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type GnosisDecryptionKeysExtra struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slot          uint64                 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	TxPointer     uint64                 `protobuf:"varint,2,opt,name=tx_pointer,json=txPointer,proto3" json:"tx_pointer,omitempty"`
	SignerIndices []uint64               `protobuf:"varint,3,rep,packed,name=signer_indices,json=signerIndices,proto3" json:"signer_indices,omitempty"`
	Signatures    [][]byte               `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GnosisDecryptionKeysExtra) Reset() {
	*x = GnosisDecryptionKeysExtra{}
	mi := &file_gossip_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GnosisDecryptionKeysExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnosisDecryptionKeysExtra) ProtoMessage() {}

func (x *GnosisDecryptionKeysExtra) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnosisDecryptionKeysExtra.ProtoReflect.Descriptor instead.
func (*GnosisDecryptionKeysExtra) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{7}
}

func (x *GnosisDecryptionKeysExtra) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *GnosisDecryptionKeysExtra) GetTxPointer() uint64 {
	if x != nil {
		return x.TxPointer
	}
	return 0
}

func (x *GnosisDecryptionKeysExtra) GetSignerIndices() []uint64 {
	if x != nil {
		return x.SignerIndices
	}
	return nil
}

func (x *GnosisDecryptionKeysExtra) GetSignatures() [][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type OptimismDecryptionKeysExtra struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptimismDecryptionKeysExtra) Reset() {
	*x = OptimismDecryptionKeysExtra{}
	mi := &file_gossip_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptimismDecryptionKeysExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimismDecryptionKeysExtra) ProtoMessage() {}

func (x *OptimismDecryptionKeysExtra) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimismDecryptionKeysExtra.ProtoReflect.Descriptor instead.
func (*OptimismDecryptionKeysExtra) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{8}
}

type ShutterServiceDecryptionKeysExtra struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SignerIndices []uint64               `protobuf:"varint,1,rep,packed,name=signer_indices,json=signerIndices,proto3" json:"signer_indices,omitempty"`
	Signature     [][]byte               `protobuf:"bytes,2,rep,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShutterServiceDecryptionKeysExtra) Reset() {
	*x = ShutterServiceDecryptionKeysExtra{}
	mi := &file_gossip_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutterServiceDecryptionKeysExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutterServiceDecryptionKeysExtra) ProtoMessage() {}

func (x *ShutterServiceDecryptionKeysExtra) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutterServiceDecryptionKeysExtra.ProtoReflect.Descriptor instead.
func (*ShutterServiceDecryptionKeysExtra) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{9}
}

func (x *ShutterServiceDecryptionKeysExtra) GetSignerIndices() []uint64 {
	if x != nil {
		return x.SignerIndices
	}
	return nil
}

func (x *ShutterServiceDecryptionKeysExtra) GetSignature() [][]byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type DecryptionKeys struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	InstanceId uint64                 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Eon        uint64                 `protobuf:"varint,2,opt,name=eon,proto3" json:"eon,omitempty"`
	Keys       []*Key                 `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`
	// Types that are valid to be assigned to Extra:
	//
	//	*DecryptionKeys_Gnosis
	//	*DecryptionKeys_Optimism
	//	*DecryptionKeys_Service
	Extra         isDecryptionKeys_Extra `protobuf_oneof:"extra"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecryptionKeys) Reset() {
	*x = DecryptionKeys{}
	mi := &file_gossip_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecryptionKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptionKeys) ProtoMessage() {}

func (x *DecryptionKeys) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptionKeys.ProtoReflect.Descriptor instead.
func (*DecryptionKeys) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{10}
}

func (x *DecryptionKeys) GetInstanceId() uint64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *DecryptionKeys) GetEon() uint64 {
	if x != nil {
		return x.Eon
	}
	return 0
}

func (x *DecryptionKeys) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DecryptionKeys) GetExtra() isDecryptionKeys_Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *DecryptionKeys) GetGnosis() *GnosisDecryptionKeysExtra {
	if x != nil {
		if x, ok := x.Extra.(*DecryptionKeys_Gnosis); ok {
			return x.Gnosis
		}
	}
	return nil
}

func (x *DecryptionKeys) GetOptimism() *OptimismDecryptionKeysExtra {
	if x != nil {
		if x, ok := x.Extra.(*DecryptionKeys_Optimism); ok {
			return x.Optimism
		}
	}
	return nil
}

func (x *DecryptionKeys) GetService() *ShutterServiceDecryptionKeysExtra {
	if x != nil {
		if x, ok := x.Extra.(*DecryptionKeys_Service); ok {
			return x.Service
		}
	}
	return nil
}

type isDecryptionKeys_Extra interface {
	isDecryptionKeys_Extra()
}

type DecryptionKeys_Gnosis struct {
	Gnosis *GnosisDecryptionKeysExtra `protobuf:"bytes,4,opt,name=gnosis,proto3,oneof"`
}

type DecryptionKeys_Optimism struct {
	Optimism *OptimismDecryptionKeysExtra `protobuf:"bytes,5,opt,name=optimism,proto3,oneof"`
}

type DecryptionKeys_Service struct {
	Service *ShutterServiceDecryptionKeysExtra `protobuf:"bytes,6,opt,name=service,proto3,oneof"`
}

func (*DecryptionKeys_Gnosis) isDecryptionKeys_Extra() {}

func (*DecryptionKeys_Optimism) isDecryptionKeys_Extra() {}

func (*DecryptionKeys_Service) isDecryptionKeys_Extra() {}

// EonPublicKey is sent by the keypers to publish the EonPublicKey for a certain
// eon.  For those that observe it, e.g. the collator, it's a candidate until
// the observer has seen at least threshold messages.
type EonPublicKey struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	InstanceId        uint64                 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	PublicKey         []byte                 `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	ActivationBlock   uint64                 `protobuf:"varint,3,opt,name=activation_block,json=activationBlock,proto3" json:"activation_block,omitempty"`
	KeyperConfigIndex uint64                 `protobuf:"varint,6,opt,name=keyper_config_index,json=keyperConfigIndex,proto3" json:"keyper_config_index,omitempty"`
	Eon               uint64                 `protobuf:"varint,7,opt,name=eon,proto3" json:"eon,omitempty"`
	Signature         []byte                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EonPublicKey) Reset() {
	*x = EonPublicKey{}
	mi := &file_gossip_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EonPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EonPublicKey) ProtoMessage() {}

func (x *EonPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EonPublicKey.ProtoReflect.Descriptor instead.
func (*EonPublicKey) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{11}
}

func (x *EonPublicKey) GetInstanceId() uint64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *EonPublicKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *EonPublicKey) GetActivationBlock() uint64 {
	if x != nil {
		return x.ActivationBlock
	}
	return 0
}

func (x *EonPublicKey) GetKeyperConfigIndex() uint64 {
	if x != nil {
		return x.KeyperConfigIndex
	}
	return 0
}

func (x *EonPublicKey) GetEon() uint64 {
	if x != nil {
		return x.Eon
	}
	return 0
}

func (x *EonPublicKey) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type TraceContext struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TraceId       []byte                 `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId        []byte                 `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	TraceFlags    []byte                 `protobuf:"bytes,3,opt,name=trace_flags,json=traceFlags,proto3" json:"trace_flags,omitempty"`
	TraceState    string                 `protobuf:"bytes,4,opt,name=trace_state,json=traceState,proto3" json:"trace_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceContext) Reset() {
	*x = TraceContext{}
	mi := &file_gossip_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceContext) ProtoMessage() {}

func (x *TraceContext) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceContext.ProtoReflect.Descriptor instead.
func (*TraceContext) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{12}
}

func (x *TraceContext) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *TraceContext) GetSpanId() []byte {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *TraceContext) GetTraceFlags() []byte {
	if x != nil {
		return x.TraceFlags
	}
	return nil
}

func (x *TraceContext) GetTraceState() string {
	if x != nil {
		return x.TraceState
	}
	return ""
}

type Envelope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Message       *anypb.Any             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Trace         *TraceContext          `protobuf:"bytes,3,opt,name=trace,proto3,oneof" json:"trace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	mi := &file_gossip_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{13}
}

func (x *Envelope) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Envelope) GetMessage() *anypb.Any {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Envelope) GetTrace() *TraceContext {
	if x != nil {
		return x.Trace
	}
	return nil
}

type Commitment struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	InstanceId           uint64                 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	TxHashes             []string               `protobuf:"bytes,2,rep,name=tx_hashes,json=txHashes,proto3" json:"tx_hashes,omitempty"`
	BidAmount            string                 `protobuf:"bytes,3,opt,name=bid_amount,json=bidAmount,proto3" json:"bid_amount,omitempty"`
	BlockNumber          int64                  `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	ReceivedBidDigest    string                 `protobuf:"bytes,5,opt,name=received_bid_digest,json=receivedBidDigest,proto3" json:"received_bid_digest,omitempty"`
	ReceivedBidSignature string                 `protobuf:"bytes,6,opt,name=received_bid_signature,json=receivedBidSignature,proto3" json:"received_bid_signature,omitempty"`
	CommitmentDigest     string                 `protobuf:"bytes,7,opt,name=commitment_digest,json=commitmentDigest,proto3" json:"commitment_digest,omitempty"`
	CommitmentSignature  string                 `protobuf:"bytes,8,opt,name=commitment_signature,json=commitmentSignature,proto3" json:"commitment_signature,omitempty"`
	ProviderAddress      string                 `protobuf:"bytes,9,opt,name=provider_address,json=providerAddress,proto3" json:"provider_address,omitempty"`
	DecayStartTimestamp  int64                  `protobuf:"varint,10,opt,name=decay_start_timestamp,json=decayStartTimestamp,proto3" json:"decay_start_timestamp,omitempty"`
	DecayEndTimestamp    int64                  `protobuf:"varint,11,opt,name=decay_end_timestamp,json=decayEndTimestamp,proto3" json:"decay_end_timestamp,omitempty"`
	DispatchTimestamp    int64                  `protobuf:"varint,12,opt,name=dispatch_timestamp,json=dispatchTimestamp,proto3" json:"dispatch_timestamp,omitempty"`
	RevertingTxHashes    []string               `protobuf:"bytes,13,rep,name=reverting_tx_hashes,json=revertingTxHashes,proto3" json:"reverting_tx_hashes,omitempty"`
	SlashAmount          string                 `protobuf:"bytes,14,opt,name=slash_amount,json=slashAmount,proto3" json:"slash_amount,omitempty"`
	Identities           []string               `protobuf:"bytes,15,rep,name=identities,proto3" json:"identities,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Commitment) Reset() {
	*x = Commitment{}
	mi := &file_gossip_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commitment) ProtoMessage() {}

func (x *Commitment) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commitment.ProtoReflect.Descriptor instead.
func (*Commitment) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{14}
}

func (x *Commitment) GetInstanceId() uint64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *Commitment) GetTxHashes() []string {
	if x != nil {
		return x.TxHashes
	}
	return nil
}

func (x *Commitment) GetBidAmount() string {
	if x != nil {
		return x.BidAmount
	}
	return ""
}

func (x *Commitment) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Commitment) GetReceivedBidDigest() string {
	if x != nil {
		return x.ReceivedBidDigest
	}
	return ""
}

func (x *Commitment) GetReceivedBidSignature() string {
	if x != nil {
		return x.ReceivedBidSignature
	}
	return ""
}

func (x *Commitment) GetCommitmentDigest() string {
	if x != nil {
		return x.CommitmentDigest
	}
	return ""
}

func (x *Commitment) GetCommitmentSignature() string {
	if x != nil {
		return x.CommitmentSignature
	}
	return ""
}

func (x *Commitment) GetProviderAddress() string {
	if x != nil {
		return x.ProviderAddress
	}
	return ""
}

func (x *Commitment) GetDecayStartTimestamp() int64 {
	if x != nil {
		return x.DecayStartTimestamp
	}
	return 0
}

func (x *Commitment) GetDecayEndTimestamp() int64 {
	if x != nil {
		return x.DecayEndTimestamp
	}
	return 0
}

func (x *Commitment) GetDispatchTimestamp() int64 {
	if x != nil {
		return x.DispatchTimestamp
	}
	return 0
}

func (x *Commitment) GetRevertingTxHashes() []string {
	if x != nil {
		return x.RevertingTxHashes
	}
	return nil
}

func (x *Commitment) GetSlashAmount() string {
	if x != nil {
		return x.SlashAmount
	}
	return ""
}

func (x *Commitment) GetIdentities() []string {
	if x != nil {
		return x.Identities
	}
	return nil
}

var File_gossip_proto protoreflect.FileDescriptor

var file_gossip_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x32, 0x70, 0x6d, 0x73, 0x67, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x4d, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x22, 0x71, 0x0a, 0x1e, 0x47, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x78,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x46, 0x0a, 0x26, 0x53, 0x68, 0x75, 0x74, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x22, 0x0a,
	0x20, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x6d, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x22, 0xf4, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x6b, 0x65, 0x79, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x70, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x32, 0x70, 0x6d, 0x73, 0x67, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x32, 0x70, 0x6d,
	0x73, 0x67, 0x2e, 0x47, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x32, 0x70, 0x6d, 0x73, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x6d, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x73, 0x6d, 0x12, 0x4a, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x32, 0x70, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x68,
	0x75, 0x74, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x44, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x2b, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x95,
	0x01, 0x0a, 0x19, 0x47, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x73, 0x6d, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x22, 0x68, 0x0a, 0x21, 0x53, 0x68, 0x75, 0x74, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0xb4, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x65, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x32, 0x70, 0x6d, 0x73, 0x67, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x32, 0x70, 0x6d, 0x73, 0x67, 0x2e,
	0x47, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x32, 0x70, 0x6d, 0x73, 0x67, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x6d, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x73, 0x6d, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x32, 0x70, 0x6d, 0x73, 0x67,
	0x2e, 0x53, 0x68, 0x75, 0x74, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xd9, 0x01, 0x0a, 0x0c, 0x45, 0x6f, 0x6e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x6b, 0x65, 0x79, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x6b, 0x65, 0x79, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x65, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x08, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x32, 0x70, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x22, 0x83, 0x05, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x42, 0x69, 0x64, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x42, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x64,
	0x65, 0x63, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x65, 0x63, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x65, 0x63, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64, 0x65,
	0x63, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2d, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e,
	0x0a, 0x13, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x3b, 0x70, 0x32, 0x70, 0x6d, 0x73, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_gossip_proto_rawDescOnce sync.Once
	file_gossip_proto_rawDescData []byte
)

func file_gossip_proto_rawDescGZIP() []byte {
	file_gossip_proto_rawDescOnce.Do(func() {
		file_gossip_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gossip_proto_rawDesc), len(file_gossip_proto_rawDesc)))
	})
	return file_gossip_proto_rawDescData
}

var file_gossip_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_gossip_proto_goTypes = []any{
	(*DecryptionTrigger)(nil),                      // 0: p2pmsg.DecryptionTrigger
	(*KeyShare)(nil),                               // 1: p2pmsg.KeyShare
	(*GnosisDecryptionKeySharesExtra)(nil),         // 2: p2pmsg.GnosisDecryptionKeySharesExtra
	(*ShutterServiceDecryptionKeySharesExtra)(nil), // 3: p2pmsg.ShutterServiceDecryptionKeySharesExtra
	(*OptimismDecryptionKeySharesExtra)(nil),       // 4: p2pmsg.OptimismDecryptionKeySharesExtra
	(*DecryptionKeyShares)(nil),                    // 5: p2pmsg.DecryptionKeyShares
	(*Key)(nil),                                    // 6: p2pmsg.Key
	(*GnosisDecryptionKeysExtra)(nil),              // 7: p2pmsg.GnosisDecryptionKeysExtra
	(*OptimismDecryptionKeysExtra)(nil),            // 8: p2pmsg.OptimismDecryptionKeysExtra
	(*ShutterServiceDecryptionKeysExtra)(nil),      // 9: p2pmsg.ShutterServiceDecryptionKeysExtra
	(*DecryptionKeys)(nil),                         // 10: p2pmsg.DecryptionKeys
	(*EonPublicKey)(nil),                           // 11: p2pmsg.EonPublicKey
	(*TraceContext)(nil),                           // 12: p2pmsg.TraceContext
	(*Envelope)(nil),                               // 13: p2pmsg.Envelope
	(*Commitment)(nil),                             // 14: p2pmsg.Commitment
	(*anypb.Any)(nil),                              // 15: google.protobuf.Any
}
var file_gossip_proto_depIdxs = []int32{
	1,  // 0: p2pmsg.DecryptionKeyShares.shares:type_name -> p2pmsg.KeyShare
	2,  // 1: p2pmsg.DecryptionKeyShares.gnosis:type_name -> p2pmsg.GnosisDecryptionKeySharesExtra
	4,  // 2: p2pmsg.DecryptionKeyShares.optimism:type_name -> p2pmsg.OptimismDecryptionKeySharesExtra
	3,  // 3: p2pmsg.DecryptionKeyShares.service:type_name -> p2pmsg.ShutterServiceDecryptionKeySharesExtra
	6,  // 4: p2pmsg.DecryptionKeys.keys:type_name -> p2pmsg.Key
	7,  // 5: p2pmsg.DecryptionKeys.gnosis:type_name -> p2pmsg.GnosisDecryptionKeysExtra
	8,  // 6: p2pmsg.DecryptionKeys.optimism:type_name -> p2pmsg.OptimismDecryptionKeysExtra
	9,  // 7: p2pmsg.DecryptionKeys.service:type_name -> p2pmsg.ShutterServiceDecryptionKeysExtra
	15, // 8: p2pmsg.Envelope.message:type_name -> google.protobuf.Any
	12, // 9: p2pmsg.Envelope.trace:type_name -> p2pmsg.TraceContext
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_gossip_proto_init() }
func file_gossip_proto_init() {
	if File_gossip_proto != nil {
		return
	}
	file_gossip_proto_msgTypes[5].OneofWrappers = []any{
		(*DecryptionKeyShares_Gnosis)(nil),
		(*DecryptionKeyShares_Optimism)(nil),
		(*DecryptionKeyShares_Service)(nil),
	}
	file_gossip_proto_msgTypes[10].OneofWrappers = []any{
		(*DecryptionKeys_Gnosis)(nil),
		(*DecryptionKeys_Optimism)(nil),
		(*DecryptionKeys_Service)(nil),
	}
	file_gossip_proto_msgTypes[13].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gossip_proto_rawDesc), len(file_gossip_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gossip_proto_goTypes,
		DependencyIndexes: file_gossip_proto_depIdxs,
		MessageInfos:      file_gossip_proto_msgTypes,
	}.Build()
	File_gossip_proto = out.File
	file_gossip_proto_goTypes = nil
	file_gossip_proto_depIdxs = nil
}
