// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: keyper.sql

package database

import (
	"context"
)

const deleteSyncedBlockByHash = `-- name: DeleteSyncedBlockByHash :exec
DELETE FROM recent_block
WHERE block_hash = $1
`

func (q *Queries) DeleteSyncedBlockByHash(ctx context.Context, blockHash []byte) error {
	_, err := q.db.Exec(ctx, deleteSyncedBlockByHash, blockHash)
	return err
}

const evictSyncedBlocksBefore = `-- name: EvictSyncedBlocksBefore :exec
DELETE FROM recent_block
WHERE block_number < $1
`

func (q *Queries) EvictSyncedBlocksBefore(ctx context.Context, blockNumber int64) error {
	_, err := q.db.Exec(ctx, evictSyncedBlocksBefore, blockNumber)
	return err
}

const getKeyperSet = `-- name: GetKeyperSet :one
SELECT keyper_config_index, activation_block_number, keypers, threshold FROM keyper_set
WHERE activation_block_number <= $1
ORDER BY activation_block_number DESC LIMIT 1
`

func (q *Queries) GetKeyperSet(ctx context.Context, activationBlockNumber int64) (KeyperSet, error) {
	row := q.db.QueryRow(ctx, getKeyperSet, activationBlockNumber)
	var i KeyperSet
	err := row.Scan(
		&i.KeyperConfigIndex,
		&i.ActivationBlockNumber,
		&i.Keypers,
		&i.Threshold,
	)
	return i, err
}

const getKeyperSetByKeyperConfigIndex = `-- name: GetKeyperSetByKeyperConfigIndex :one
SELECT keyper_config_index, activation_block_number, keypers, threshold FROM keyper_set WHERE keyper_config_index=$1
`

func (q *Queries) GetKeyperSetByKeyperConfigIndex(ctx context.Context, keyperConfigIndex int64) (KeyperSet, error) {
	row := q.db.QueryRow(ctx, getKeyperSetByKeyperConfigIndex, keyperConfigIndex)
	var i KeyperSet
	err := row.Scan(
		&i.KeyperConfigIndex,
		&i.ActivationBlockNumber,
		&i.Keypers,
		&i.Threshold,
	)
	return i, err
}

const getKeyperSets = `-- name: GetKeyperSets :many
SELECT keyper_config_index, activation_block_number, keypers, threshold FROM keyper_set
ORDER BY activation_block_number ASC
`

func (q *Queries) GetKeyperSets(ctx context.Context) ([]KeyperSet, error) {
	rows, err := q.db.Query(ctx, getKeyperSets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeyperSet
	for rows.Next() {
		var i KeyperSet
		if err := rows.Scan(
			&i.KeyperConfigIndex,
			&i.ActivationBlockNumber,
			&i.Keypers,
			&i.Threshold,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestSyncedBlocks = `-- name: GetLatestSyncedBlocks :many
SELECT block_hash, block_number, parent_hash, timestamp, header FROM recent_block
ORDER BY block_number DESC
LIMIT $1
`

func (q *Queries) GetLatestSyncedBlocks(ctx context.Context, limit int32) ([]RecentBlock, error) {
	rows, err := q.db.Query(ctx, getLatestSyncedBlocks, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecentBlock
	for rows.Next() {
		var i RecentBlock
		if err := rows.Scan(
			&i.BlockHash,
			&i.BlockNumber,
			&i.ParentHash,
			&i.Timestamp,
			&i.Header,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSyncedBlockByHash = `-- name: GetSyncedBlockByHash :one
SELECT block_hash, block_number, parent_hash, timestamp, header FROM recent_block
WHERE block_hash = $1
`

func (q *Queries) GetSyncedBlockByHash(ctx context.Context, blockHash []byte) (RecentBlock, error) {
	row := q.db.QueryRow(ctx, getSyncedBlockByHash, blockHash)
	var i RecentBlock
	err := row.Scan(
		&i.BlockHash,
		&i.BlockNumber,
		&i.ParentHash,
		&i.Timestamp,
		&i.Header,
	)
	return i, err
}

const getSyncedBlocks = `-- name: GetSyncedBlocks :many
SELECT block_hash, block_number, parent_hash, timestamp, header FROM recent_block
ORDER BY block_number DESC
`

func (q *Queries) GetSyncedBlocks(ctx context.Context) ([]RecentBlock, error) {
	rows, err := q.db.Query(ctx, getSyncedBlocks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecentBlock
	for rows.Next() {
		var i RecentBlock
		if err := rows.Scan(
			&i.BlockHash,
			&i.BlockNumber,
			&i.ParentHash,
			&i.Timestamp,
			&i.Header,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertKeyperSet = `-- name: InsertKeyperSet :exec
INSERT INTO keyper_set (
    keyper_config_index,
    activation_block_number,
    keypers,
    threshold
) VALUES (
    $1, $2, $3, $4
) ON CONFLICT DO NOTHING
`

type InsertKeyperSetParams struct {
	KeyperConfigIndex     int64
	ActivationBlockNumber int64
	Keypers               []string
	Threshold             int32
}

func (q *Queries) InsertKeyperSet(ctx context.Context, arg InsertKeyperSetParams) error {
	_, err := q.db.Exec(ctx, insertKeyperSet,
		arg.KeyperConfigIndex,
		arg.ActivationBlockNumber,
		arg.Keypers,
		arg.Threshold,
	)
	return err
}

const insertSyncedBlock = `-- name: InsertSyncedBlock :exec
INSERT INTO recent_block (
       block_hash,
       block_number,
       parent_hash,
       timestamp,
       header
) VALUES (
    $1, $2, $3, $4, $5
) ON CONFLICT DO UPDATE SET
       block_hash = $1,
       block_number =$2 ,
       parent_hash =$3,
       timestamp =$4 ,
       header =$5
`

type InsertSyncedBlockParams struct {
	BlockHash   []byte
	BlockNumber int64
	ParentHash  []byte
	Timestamp   int64
	Header      []byte
}

func (q *Queries) InsertSyncedBlock(ctx context.Context, arg InsertSyncedBlockParams) error {
	_, err := q.db.Exec(ctx, insertSyncedBlock,
		arg.BlockHash,
		arg.BlockNumber,
		arg.ParentHash,
		arg.Timestamp,
		arg.Header,
	)
	return err
}
