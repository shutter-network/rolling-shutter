// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: collator.sql

package database

import (
	"context"
)

const getChainCollator = `-- name: GetChainCollator :one
SELECT activation_block_number, collator FROM chain_collator
WHERE activation_block_number <= $1
ORDER BY activation_block_number DESC LIMIT 1
`

func (q *Queries) GetChainCollator(ctx context.Context, activationBlockNumber int64) (ChainCollator, error) {
	row := q.db.QueryRow(ctx, getChainCollator, activationBlockNumber)
	var i ChainCollator
	err := row.Scan(&i.ActivationBlockNumber, &i.Collator)
	return i, err
}

const insertChainCollator = `-- name: InsertChainCollator :exec
INSERT INTO chain_collator (activation_block_number, collator)
VALUES ($1, $2)
`

type InsertChainCollatorParams struct {
	ActivationBlockNumber int64
	Collator              string
}

func (q *Queries) InsertChainCollator(ctx context.Context, arg InsertChainCollatorParams) error {
	_, err := q.db.Exec(ctx, insertChainCollator, arg.ActivationBlockNumber, arg.Collator)
	return err
}
