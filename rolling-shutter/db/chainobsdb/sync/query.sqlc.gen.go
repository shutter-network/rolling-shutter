// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package chainobsdb

import (
	"context"
)

const getEventSyncProgress = `-- name: GetEventSyncProgress :one
SELECT next_block_number, next_log_index FROM event_sync_progress LIMIT 1
`

type GetEventSyncProgressRow struct {
	NextBlockNumber int32 `db:"next_block_number"`
	NextLogIndex    int32 `db:"next_log_index"`
}

func (q *Queries) GetEventSyncProgress(ctx context.Context) (GetEventSyncProgressRow, error) {
	row := q.db.QueryRow(ctx, getEventSyncProgress)
	var i GetEventSyncProgressRow
	err := row.Scan(&i.NextBlockNumber, &i.NextLogIndex)
	return i, err
}

const getNextBlockNumber = `-- name: GetNextBlockNumber :one
SELECT next_block_number from event_sync_progress LIMIT 1
`

func (q *Queries) GetNextBlockNumber(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, getNextBlockNumber)
	var next_block_number int32
	err := row.Scan(&next_block_number)
	return next_block_number, err
}

const updateEventSyncProgress = `-- name: UpdateEventSyncProgress :exec
INSERT INTO event_sync_progress (next_block_number, next_log_index)
VALUES ($1, $2)
ON CONFLICT (id) DO UPDATE
    SET next_block_number = $1,
        next_log_index = $2
`

type UpdateEventSyncProgressParams struct {
	NextBlockNumber int32 `db:"next_block_number"`
	NextLogIndex    int32 `db:"next_log_index"`
}

func (q *Queries) UpdateEventSyncProgress(ctx context.Context, arg UpdateEventSyncProgressParams) error {
	_, err := q.db.Exec(ctx, updateEventSyncProgress, arg.NextBlockNumber, arg.NextLogIndex)
	return err
}
