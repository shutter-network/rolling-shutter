// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: primev.sql

package database

import (
	"context"

	"github.com/jackc/pgconn"
)

const deleteProviderRegistryEventsFromBlockNumber = `-- name: DeleteProviderRegistryEventsFromBlockNumber :exec
DELETE FROM provider_registry_events WHERE block_number >= $1
`

func (q *Queries) DeleteProviderRegistryEventsFromBlockNumber(ctx context.Context, blockNumber int64) error {
	_, err := q.db.Exec(ctx, deleteProviderRegistryEventsFromBlockNumber, blockNumber)
	return err
}

const getCommitmentByTxHash = `-- name: GetCommitmentByTxHash :many
SELECT
    c.tx_hashes,
    c.provider_address,
    c.commitment_signature,
    c.commitment_digest,
    c.block_number
FROM commitment c
WHERE c.tx_hashes = $1
`

func (q *Queries) GetCommitmentByTxHash(ctx context.Context, txHashes []string) ([]Commitment, error) {
	rows, err := q.db.Query(ctx, getCommitmentByTxHash, txHashes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Commitment
	for rows.Next() {
		var i Commitment
		if err := rows.Scan(
			&i.TxHashes,
			&i.ProviderAddress,
			&i.CommitmentSignature,
			&i.CommitmentDigest,
			&i.BlockNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProviderRegistryEventsSyncedUntil = `-- name: GetProviderRegistryEventsSyncedUntil :one
SELECT enforce_one_row, block_hash, block_number FROM provider_registry_events_synced_until LIMIT 1
`

func (q *Queries) GetProviderRegistryEventsSyncedUntil(ctx context.Context) (ProviderRegistryEventsSyncedUntil, error) {
	row := q.db.QueryRow(ctx, getProviderRegistryEventsSyncedUntil)
	var i ProviderRegistryEventsSyncedUntil
	err := row.Scan(&i.EnforceOneRow, &i.BlockHash, &i.BlockNumber)
	return i, err
}

const insertMultipleTransactionsAndUpsertCommitment = `-- name: InsertMultipleTransactionsAndUpsertCommitment :exec
WITH inserted_transactions AS (
    INSERT INTO committed_transactions (eon, identity_preimage, block_number, tx_hash)
    SELECT
        unnest($1::bigint[]) as eon,
        unnest($2::text[]) as identity_preimage,
        unnest($3::bigint[]) as block_number,
        unnest($4::text[]) as tx_hash
    ON CONFLICT (eon, identity_preimage, tx_hash) DO NOTHING
    RETURNING tx_hash
),
upserted_commitment AS (
    INSERT INTO commitment (tx_hashes, provider_address, commitment_signature, commitment_digest, block_number)
    SELECT
        ARRAY_AGG(tx_hash),
        $5,
        $6,
        $7,
        $8
    FROM inserted_transactions
    ON CONFLICT (provider_address, commitment_digest, block_number)
    DO UPDATE SET
        tx_hashes = commitment.tx_hashes || EXCLUDED.tx_hashes
    RETURNING tx_hashes, provider_address
)
SELECT tx_hashes, provider_address FROM upserted_commitment
`

type InsertMultipleTransactionsAndUpsertCommitmentParams struct {
	Column1             []int64
	Column2             []string
	Column3             []int64
	Column4             []string
	ProviderAddress     string
	CommitmentSignature string
	CommitmentDigest    string
	BlockNumber         int64
}

func (q *Queries) InsertMultipleTransactionsAndUpsertCommitment(ctx context.Context, arg InsertMultipleTransactionsAndUpsertCommitmentParams) error {
	_, err := q.db.Exec(ctx, insertMultipleTransactionsAndUpsertCommitment,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.ProviderAddress,
		arg.CommitmentSignature,
		arg.CommitmentDigest,
		arg.BlockNumber,
	)
	return err
}

const insertProviderRegistryEvent = `-- name: InsertProviderRegistryEvent :execresult
INSERT INTO provider_registry_events (block_number, block_hash, tx_index, log_index, provider_address, bls_keys)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (provider_address) DO UPDATE SET
block_number = $1,
block_hash = $2,
tx_index = $3,
log_index = $4,
bls_keys = $6
`

type InsertProviderRegistryEventParams struct {
	BlockNumber     int64
	BlockHash       []byte
	TxIndex         int64
	LogIndex        int64
	ProviderAddress string
	BlsKeys         [][]byte
}

func (q *Queries) InsertProviderRegistryEvent(ctx context.Context, arg InsertProviderRegistryEventParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertProviderRegistryEvent,
		arg.BlockNumber,
		arg.BlockHash,
		arg.TxIndex,
		arg.LogIndex,
		arg.ProviderAddress,
		arg.BlsKeys,
	)
}

const setProviderRegistryEventsSyncedUntil = `-- name: SetProviderRegistryEventsSyncedUntil :exec
INSERT INTO provider_registry_events_synced_until (block_hash, block_number) VALUES ($1, $2)
ON CONFLICT (enforce_one_row) DO UPDATE
SET block_hash = $1, block_number = $2
`

type SetProviderRegistryEventsSyncedUntilParams struct {
	BlockHash   []byte
	BlockNumber int64
}

func (q *Queries) SetProviderRegistryEventsSyncedUntil(ctx context.Context, arg SetProviderRegistryEventsSyncedUntilParams) error {
	_, err := q.db.Exec(ctx, setProviderRegistryEventsSyncedUntil, arg.BlockHash, arg.BlockNumber)
	return err
}
