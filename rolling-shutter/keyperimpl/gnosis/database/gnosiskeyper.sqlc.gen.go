// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: gnosiskeyper.sql

package database

import (
	"context"

	"github.com/jackc/pgconn"
)

const getTransactionSubmittedEventsSyncedUntil = `-- name: GetTransactionSubmittedEventsSyncedUntil :one
SELECT block_number FROM transaction_submitted_events_synced_until LIMIT 1
`

func (q *Queries) GetTransactionSubmittedEventsSyncedUntil(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTransactionSubmittedEventsSyncedUntil)
	var block_number int64
	err := row.Scan(&block_number)
	return block_number, err
}

const insertTransactionSubmittedEvent = `-- name: InsertTransactionSubmittedEvent :execresult
INSERT INTO transaction_submitted_event (
    block_number,
    block_hash,
    tx_index,
    log_index,
    eon,
    identity_prefix,
    sender,
    gas_limit
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT DO NOTHING
`

type InsertTransactionSubmittedEventParams struct {
	BlockNumber    int64
	BlockHash      []byte
	TxIndex        int64
	LogIndex       int64
	Eon            int64
	IdentityPrefix []byte
	Sender         string
	GasLimit       int64
}

func (q *Queries) InsertTransactionSubmittedEvent(ctx context.Context, arg InsertTransactionSubmittedEventParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertTransactionSubmittedEvent,
		arg.BlockNumber,
		arg.BlockHash,
		arg.TxIndex,
		arg.LogIndex,
		arg.Eon,
		arg.IdentityPrefix,
		arg.Sender,
		arg.GasLimit,
	)
}

const setTransactionSubmittedEventsSyncedUntil = `-- name: SetTransactionSubmittedEventsSyncedUntil :exec
INSERT INTO transaction_submitted_events_synced_until (block_number) VALUES ($1)
ON CONFLICT (enforce_one_row) DO UPDATE
SET block_number = $1
`

func (q *Queries) SetTransactionSubmittedEventsSyncedUntil(ctx context.Context, blockNumber int64) error {
	_, err := q.db.Exec(ctx, setTransactionSubmittedEventsSyncedUntil, blockNumber)
	return err
}
