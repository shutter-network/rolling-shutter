// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: snapshot.sql

package database

import (
	"context"
)

const getDecryptionKey = `-- name: GetDecryptionKey :one
SELECT epoch_id, key
FROM decryption_key
WHERE epoch_id = $1
`

func (q *Queries) GetDecryptionKey(ctx context.Context, epochID []byte) (DecryptionKey, error) {
	row := q.db.QueryRow(ctx, getDecryptionKey, epochID)
	var i DecryptionKey
	err := row.Scan(&i.EpochID, &i.Key)
	return i, err
}

const getDecryptionKeyCount = `-- name: GetDecryptionKeyCount :one
SELECT COUNT(DISTINCT epoch_id)
FROM decryption_key
`

func (q *Queries) GetDecryptionKeyCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getDecryptionKeyCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getEonCount = `-- name: GetEonCount :one
SELECT COUNT(DISTINCT eon_id)
FROM eon_public_key
`

func (q *Queries) GetEonCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getEonCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getEonPublicKey = `-- name: GetEonPublicKey :one
SELECT eon_public_key
FROM eon_public_key
WHERE eon_id = $1
`

func (q *Queries) GetEonPublicKey(ctx context.Context, eonID int64) ([]byte, error) {
	row := q.db.QueryRow(ctx, getEonPublicKey, eonID)
	var eon_public_key []byte
	err := row.Scan(&eon_public_key)
	return eon_public_key, err
}

const getEonPublicKeyLatest = `-- name: GetEonPublicKeyLatest :one
SELECT eon_id, eon_public_key
FROM eon_public_key
ORDER BY eon_id DESC
LIMIT 1
`

func (q *Queries) GetEonPublicKeyLatest(ctx context.Context) (EonPublicKey, error) {
	row := q.db.QueryRow(ctx, getEonPublicKeyLatest)
	var i EonPublicKey
	err := row.Scan(&i.EonID, &i.EonPublicKey)
	return i, err
}

const insertDecryptionKey = `-- name: InsertDecryptionKey :execrows
INSERT INTO decryption_key (
        epoch_id,
        key
) VALUES (
        $1, $2
)
ON CONFLICT DO NOTHING
`

type InsertDecryptionKeyParams struct {
	EpochID []byte
	Key     []byte
}

func (q *Queries) InsertDecryptionKey(ctx context.Context, arg InsertDecryptionKeyParams) (int64, error) {
	result, err := q.db.Exec(ctx, insertDecryptionKey, arg.EpochID, arg.Key)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const insertEonPublicKey = `-- name: InsertEonPublicKey :execrows
INSERT INTO eon_public_key (
        eon_id,
        eon_public_key
) VALUES (
        $1, $2
)
ON CONFLICT DO NOTHING
`

type InsertEonPublicKeyParams struct {
	EonID        int64
	EonPublicKey []byte
}

func (q *Queries) InsertEonPublicKey(ctx context.Context, arg InsertEonPublicKeyParams) (int64, error) {
	result, err := q.db.Exec(ctx, insertEonPublicKey, arg.EonID, arg.EonPublicKey)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
