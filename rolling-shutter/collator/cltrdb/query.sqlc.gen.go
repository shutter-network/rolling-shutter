// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package cltrdb

import (
	"context"

	"github.com/jackc/pgconn"
)

const existsDecryptionKey = `-- name: ExistsDecryptionKey :one
SELECT EXISTS (
    SELECT 1
    FROM decryption_key
    WHERE epoch_id = $1
)
`

func (q *Queries) ExistsDecryptionKey(ctx context.Context, epochID []byte) (bool, error) {
	row := q.db.QueryRow(ctx, existsDecryptionKey, epochID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getDecryptionKey = `-- name: GetDecryptionKey :one
SELECT epoch_id, decryption_key FROM decryption_key
WHERE epoch_id = $1
`

func (q *Queries) GetDecryptionKey(ctx context.Context, epochID []byte) (DecryptionKey, error) {
	row := q.db.QueryRow(ctx, getDecryptionKey, epochID)
	var i DecryptionKey
	err := row.Scan(&i.EpochID, &i.DecryptionKey)
	return i, err
}

const getEonForBlock = `-- name: GetEonForBlock :one
SELECT activation_block_number, eon_public_key, threshold FROM eon
WHERE activation_block_number <= $1
ORDER BY activation_block_number DESC
LIMIT 1
`

// There could be ambiguities when same activation_block_number
//   is used for different pubkeys, see #238
func (q *Queries) GetEonForBlock(ctx context.Context, blockNumber int64) (Eon, error) {
	row := q.db.QueryRow(ctx, getEonForBlock, blockNumber)
	var i Eon
	err := row.Scan(&i.ActivationBlockNumber, &i.EonPublicKey, &i.Threshold)
	return i, err
}

const getEonPublicKeyMessages = `-- name: GetEonPublicKeyMessages :many
WITH t3 AS (
	SELECT t2.activation_block_number, t2.eon_public_key, t2.msg_bytes, t2.keyper_index FROM (
		SELECT t1.num_signatures,
			t1.activation_block_number,
			t1.eon_public_key,
			t1.msg_bytes,
			t1.keyper_index
			FROM (
			SELECT eon.threshold,
				epkm.keyper_index,
				epkm.msg_bytes,
				epkm.activation_block_number,
				epkm.eon_public_key,
				COUNT(keyper_index) OVER (PARTITION BY (epkm.activation_block_number, epkm.eon_public_key)) num_signatures
			FROM eon_public_key_message epkm
			INNER JOIN eon
				ON epkm.activation_block_number = eon.activation_block_number
				AND epkm.eon_public_key = eon.eon_public_key
			WHERE epkm.activation_block_number <= $1
			) t1
		WHERE t1.num_signatures >= t1.threshold
		) t2
)
SELECT m.activation_block_number, m.eon_public_key, m.msg_bytes, m.keyper_index
FROM t3 m
WHERE NOT EXISTS (SELECT activation_block_number, eon_public_key, msg_bytes, keyper_index FROM t3 b WHERE b.activation_block_number > m.activation_block_number)
`

type GetEonPublicKeyMessagesRow struct {
	ActivationBlockNumber int64
	EonPublicKey          []byte
	MsgBytes              []byte
	KeyperIndex           int64
}

func (q *Queries) GetEonPublicKeyMessages(ctx context.Context, blockNumber int64) ([]GetEonPublicKeyMessagesRow, error) {
	rows, err := q.db.Query(ctx, getEonPublicKeyMessages, blockNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEonPublicKeyMessagesRow
	for rows.Next() {
		var i GetEonPublicKeyMessagesRow
		if err := rows.Scan(
			&i.ActivationBlockNumber,
			&i.EonPublicKey,
			&i.MsgBytes,
			&i.KeyperIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastBatchEpochID = `-- name: GetLastBatchEpochID :one
SELECT epoch_id FROM decryption_trigger ORDER BY epoch_id DESC LIMIT 1
`

func (q *Queries) GetLastBatchEpochID(ctx context.Context) ([]byte, error) {
	row := q.db.QueryRow(ctx, getLastBatchEpochID)
	var epoch_id []byte
	err := row.Scan(&epoch_id)
	return epoch_id, err
}

const getNextEpochID = `-- name: GetNextEpochID :one
SELECT epoch_id FROM next_epoch LIMIT 1
`

func (q *Queries) GetNextEpochID(ctx context.Context) ([]byte, error) {
	row := q.db.QueryRow(ctx, getNextEpochID)
	var epoch_id []byte
	err := row.Scan(&epoch_id)
	return epoch_id, err
}

const getTransactionsByEpoch = `-- name: GetTransactionsByEpoch :many
SELECT encrypted_tx FROM transaction WHERE epoch_id = $1 ORDER BY tx_id
`

func (q *Queries) GetTransactionsByEpoch(ctx context.Context, epochID []byte) ([][]byte, error) {
	rows, err := q.db.Query(ctx, getTransactionsByEpoch, epochID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items [][]byte
	for rows.Next() {
		var encrypted_tx []byte
		if err := rows.Scan(&encrypted_tx); err != nil {
			return nil, err
		}
		items = append(items, encrypted_tx)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrigger = `-- name: GetTrigger :one
SELECT epoch_id, batch_hash FROM decryption_trigger WHERE epoch_id = $1
`

func (q *Queries) GetTrigger(ctx context.Context, epochID []byte) (DecryptionTrigger, error) {
	row := q.db.QueryRow(ctx, getTrigger, epochID)
	var i DecryptionTrigger
	err := row.Scan(&i.EpochID, &i.BatchHash)
	return i, err
}

const insertCandidateEonIfNotExists = `-- name: InsertCandidateEonIfNotExists :exec
INSERT INTO eon (activation_block_number, eon_public_key, threshold) VALUES ($1, $2, $3)
ON CONFLICT DO NOTHING
`

type InsertCandidateEonIfNotExistsParams struct {
	ActivationBlockNumber int64
	EonPublicKey          []byte
	Threshold             int64
}

func (q *Queries) InsertCandidateEonIfNotExists(ctx context.Context, arg InsertCandidateEonIfNotExistsParams) error {
	_, err := q.db.Exec(ctx, insertCandidateEonIfNotExists, arg.ActivationBlockNumber, arg.EonPublicKey, arg.Threshold)
	return err
}

const insertDecryptionKey = `-- name: InsertDecryptionKey :execresult
INSERT INTO decryption_key (epoch_id, decryption_key)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type InsertDecryptionKeyParams struct {
	EpochID       []byte
	DecryptionKey []byte
}

func (q *Queries) InsertDecryptionKey(ctx context.Context, arg InsertDecryptionKeyParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertDecryptionKey, arg.EpochID, arg.DecryptionKey)
}

const insertEonPublicKeyMessage = `-- name: InsertEonPublicKeyMessage :exec
INSERT INTO eon_public_key_message
    (eon_public_key, activation_block_number, keyper_index, msg_bytes)
    VALUES ($1, $2, $3, $4)
`

type InsertEonPublicKeyMessageParams struct {
	EonPublicKey          []byte
	ActivationBlockNumber int64
	KeyperIndex           int64
	MsgBytes              []byte
}

func (q *Queries) InsertEonPublicKeyMessage(ctx context.Context, arg InsertEonPublicKeyMessageParams) error {
	_, err := q.db.Exec(ctx, insertEonPublicKeyMessage,
		arg.EonPublicKey,
		arg.ActivationBlockNumber,
		arg.KeyperIndex,
		arg.MsgBytes,
	)
	return err
}

const insertTrigger = `-- name: InsertTrigger :exec
INSERT INTO decryption_trigger (epoch_id, batch_hash) VALUES ($1, $2)
`

type InsertTriggerParams struct {
	EpochID   []byte
	BatchHash []byte
}

func (q *Queries) InsertTrigger(ctx context.Context, arg InsertTriggerParams) error {
	_, err := q.db.Exec(ctx, insertTrigger, arg.EpochID, arg.BatchHash)
	return err
}

const insertTx = `-- name: InsertTx :exec
INSERT INTO transaction (tx_id, epoch_id, encrypted_tx) VALUES ($1, $2, $3)
`

type InsertTxParams struct {
	TxID        []byte
	EpochID     []byte
	EncryptedTx []byte
}

func (q *Queries) InsertTx(ctx context.Context, arg InsertTxParams) error {
	_, err := q.db.Exec(ctx, insertTx, arg.TxID, arg.EpochID, arg.EncryptedTx)
	return err
}

const setNextEpochID = `-- name: SetNextEpochID :exec
INSERT INTO next_epoch (epoch_id) VALUES ($1)
ON CONFLICT (enforce_one_row) DO UPDATE
SET epoch_id = $1
`

func (q *Queries) SetNextEpochID(ctx context.Context, epochID []byte) error {
	_, err := q.db.Exec(ctx, setNextEpochID, epochID)
	return err
}
