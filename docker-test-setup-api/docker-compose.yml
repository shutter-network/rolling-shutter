x-logging: &logging
  driver: local
  options:
    max-file: 10

services:
  rs-build:
    build:
      dockerfile: docker/build-src/rolling-shutter/Dockerfile
      context: ..
    image: rolling-shutter
    command: "-v"

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - ./data/db:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres
      start_period: "30s"
      start_interval: "2s"
    logging: *logging

  blockchain:
    build:
      dockerfile: docker-test-setup-api/build-src/setup-blockchain/Dockerfile
      context: ..
    restart: unless-stopped
    ports:
      - "8545:8545"
    volumes:
      - ./data/blockchain:/data
    # currently health checks fail
    healthcheck:
      test: >
        curl -sSf -X POST http://127.0.0.1:8545 -H "Content-Type: application/json" --data-raw '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[], "id": 1}' | grep -o '"result":"0x'
      start_period: "30s"
      start_interval: "2s"
    logging: *logging

  deploy-contracts:
    build:
      dockerfile: docker-test-setup-api/build-src/deploy_contracts/Dockerfile
      context: ..
    command:
      - "./script/Deploy.service.s.sol"
      - "--rpc-url"
      - "http://blockchain:8545"
      - "--broadcast"
    environment:
      DEPLOY_KEY: ${DEPLOY_KEY}
      PRIVATE_KEY: ${DEPLOY_KEY}
    volumes:
      - ./data/deployments:/contracts/broadcast
      - ./config:/config
    depends_on:
      - blockchain
    logging: *logging

  add-keyper-set:
    build:
      dockerfile: docker-test-setup-api/build-src/deploy_contracts/Dockerfile
      context: ..
    command:
      - "./script/AddKeyperSet.s.sol"
      - "--rpc-url"
      - "http://blockchain:8545"
      - "--broadcast"
    environment:
      DEPLOY_KEY: ${DEPLOY_KEY}
      PRIVATE_KEY: ${DEPLOY_KEY}
      ACTIVATION_DELTA: ${ACTIVATION_DELTA}
      KEYPERSETMANAGER_ADDRESS: ${KEYPERSETMANAGER_ADDRESS}
      KEYBROADCAST_ADDRESS: ${KEYBROADCAST_ADDRESS}
      KEYPER_ADDRESSES: ${KEYPER_ADDRESSES}
      THRESHOLD: ${THRESHOLD}
    volumes:
      - ./data/deployments:/contracts/broadcast
      - ./config:/config
    depends_on:
      - deploy-contracts
      - blockchain
    logging: *logging

  contract-scripts:
    profiles:
      - maintenance
    build:
      dockerfile: docker-test-setup-api/build-src/deploy_contracts/Dockerfile
      context: ..
    command:
      - "--rpc-url"
      - "http://blockchain:8545"
    environment:
      DEPLOY_KEY: ${DEPLOY_KEY}
      TX_SENDER_KEY: ${DEPLOY_KEY}
    volumes:
      - ./data/deployments:/contracts/broadcast
      - ./config:/config
    logging: *logging

  register-identity:
    build:
      dockerfile: docker-test-setup-api/build-src/deploy_contracts/Dockerfile
      context: ..
    command:
      - "./script/SubmitTransaction.service.s.sol"
      - "--rpc-url"
      - "http://blockchain:8545"
      - "--broadcast"
    environment:
      TX_SENDER_KEY: ${DEPLOY_KEY}
      REGISTRY_ADDRESS: ${ShutterRegistry}
      EON: 1
      IDENTITY_PREFIX: ${IDENTITY_PREFIX}
      TIMESTAMP: ${TIMESTAMP}
    volumes:
      - ./data/deployments:/contracts/broadcast
      - ./config:/config
    depends_on:
      - blockchain
    logging: *logging

  chain-0-validator:
    image: rolling-shutter
    restart: always
    entrypoint:
      - /rolling-shutter
      - chain
    volumes:
      - ./data/chain-0-validator:/chain
      - ./data/deployments:/deployments
      - ./config:/config
    command: "--config /chain/config/config.toml"
    depends_on:
      - deploy-contracts
    logging: *logging

  chain-1-validator:
    image: rolling-shutter
    restart: always
    entrypoint:
      - /rolling-shutter
      - chain
    volumes:
      - ./data/chain-1-validator:/chain
      - ./data/deployments:/deployments
    command: "--config /chain/config/config.toml"
    depends_on:
      - deploy-contracts
    logging: *logging

  chain-2-validator:
    image: rolling-shutter
    restart: always
    entrypoint:
      - /rolling-shutter
      - chain
    volumes:
      - ./data/chain-2-validator:/chain
      - ./data/deployments:/deployments
    command: "--config /chain/config/config.toml"
    depends_on:
      - deploy-contracts
    logging: *logging

  chain-seed:
    image: rolling-shutter
    restart: always
    entrypoint:
      - /rolling-shutter
      - chain
    volumes:
      - ./data/chain-seed:/chain
    command: "--config /chain/config/config.toml"
    logging: *logging

  bootnode-0:
    image: rolling-shutter
    restart: always
    entrypoint:
      - /rolling-shutter
      - p2pnode
    command: "--config /config/bootstrap.toml"
    volumes:
      - ./config:/config
      - ./data/deployments:/deployments
    depends_on:
      db:
        condition: service_healthy
    logging: *logging

  keyper-0:
    image: rolling-shutter
    restart: always
    entrypoint:
      - /rolling-shutter
      - "--loglevel=:debug,basichost:info,swarm:info,swarm2:info,net/identify:info,pubsub:info,p2p-config:info,upgrader:info,dht:info"
      - shutterservicekeyper
    command: "--config /config/keyper-0.toml"
    volumes:
      - ./config:/config
      - ./data/deployments:/deployments
    ports:
      - "9200:9100"
    depends_on:
      db:
        condition: service_healthy
      bootnode-0:
        condition: service_started
      chain-0-validator:
        condition: service_started
    logging: *logging

  keyper-1:
    image: rolling-shutter
    restart: always
    entrypoint:
      - /rolling-shutter
      - shutterservicekeyper
    command: "--config /config/keyper-1.toml"
    volumes:
      - ./config:/config
      - ./data/deployments:/deployments
    ports:
      - "9201:9100"
    depends_on:
      db:
        condition: service_healthy
      bootnode-0:
        condition: service_started
      chain-1-validator:
        condition: service_started
    logging: *logging

  keyper-2:
    image: rolling-shutter
    restart: always
    entrypoint:
      - /rolling-shutter
      - shutterservicekeyper
    command: "--config /config/keyper-2.toml"
    volumes:
      - ./config:/config
      - ./data/deployments:/deployments
    ports:
      - "9202:9100"
    depends_on:
      db:
        condition: service_healthy
      bootnode-0:
        condition: service_started
      chain-2-validator:
        condition: service_started
    logging: *logging

  wait-for-db:
    image: postgres:latest
    profiles:
      - script
    command: >
      sh -c '
        until pg_isready -h db -p 5432 -U postgres; do
          echo "Waiting for db to be ready..."
          sleep 1
        done
        echo "db is ready"
      '
    depends_on:
      - db
    logging: *logging
