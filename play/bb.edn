{:min-bb-version "0.7.3"
 :deps {org.clojars.lispyclouds/contajners {:mvn/version "0.0.6"}}
 :paths ["src"]
 :tasks
 {:requires ([babashka.fs :as fs :refer [which]]
             [babashka.process :as p]
             [babashka.core]
             [clojure.string :as str]
             [clojure.java.browse :as browse]
             [clojure.java.io :as io]
             [contajners.core :as c]
             [babashka.curl :as curl]
             [cheshire.core :as json]
             [sht.play :as play :refer [run-process]])
  :init
  (do
    (def volumes-docker (c/client {:engine   :docker
                                   :category :volumes
                                   :version  "v1.41"
                                   :conn     {:uri "unix:///var/run/docker.sock"}}))

    (defn docker-shutter-nitro-volumes
      []
      (c/invoke volumes-docker
                {:op  :VolumeList
                 :params {:filters (json/generate-string {"label" {"com.docker.compose.project=shutter-nitro" true}})}}))

    (defn docker-delete-volume
      [vol]
      (c/invoke volumes-docker
                {:op :VolumeDelete
                 :params {:name vol}}))

    (defn long-from-env
      [s default]
      (Long/valueOf (or (System/getenv s) default)))

    (def num-keypers (long-from-env "PLAY_NUM_KEYPERS" "3"))
    (def num-bootstrappers (long-from-env "PLAY_NUM_BOOTSTRAPPERS" "1"))

    (def windows? (babashka.core/windows?))
    (def no-color? windows?)

    (defn keyper-port [n]
      (-> n play/keyper-subcommand :subcommand/p2p-port))

    (defn inside-asdf?
      [path]
      (let [asdf-dir (some-> "ASDF_DIR" System/getenv fs/canonicalize (str "/"))
            path (some-> path fs/canonicalize str)]
        (if (or (nil? asdf-dir) (nil? path))
          false
          (str/starts-with? path asdf-dir))))
    (def asdf-go?
      (inside-asdf? (fs/which "go")))

    (def repo-root play/repo-root)
    (def src-dir
      (-> repo-root (fs/path "rolling-shutter") str))
    (def play-dir
      (-> repo-root (fs/path "play") str))
    (def nitro-dir
      (-> repo-root (fs/path "play" "shutter-nitro") str))
    (defn src-file [p]
      (-> src-dir (fs/path p) str))
    (def contracts-dir
      (-> src-dir (fs/path ".." "contracts") fs/canonicalize str))

    (def exe (src-file (str "bin/rolling-shutter" (if windows? ".exe"))))
    (def ansi-green (if no-color? "" "\u001B[32m"))
    (def ansi-reset (if no-color? "" "\u001B[0m"))
    (defn log
      [& args]
      (print ansi-green (format "==> [%s] " (:name (current-task))))
      (apply print args)
      (println ansi-reset))
    (play/set-bb-log! log)
    (defn download-to
      [url path]
      (log "Downloading" url "to" path)
      (io/copy
       (:body (curl/get url {:as :stream}))
       (io/file path)))

    (defn toml-replace
      [toml-str key value]
      (str/replace-first
       toml-str
       (re-pattern (format "(?m)(^\\s*%s\\s*=)(.*)" key))
       (str "$1 " (json/encode value))))

    (defn toml-edit-string
      [toml-str m]
      (reduce (fn [toml-str [k v]]
                (toml-replace toml-str k v))
              toml-str
              m))

    (defn toml-edit-file
      [filename m]
      (spit filename (toml-edit-string (slurp filename) m)))

    (def mock-cfg "mock.toml")
    (def collator-cfg "collator.toml")

    (defn gotest
      [& args]
      (let [cmd (concat ["gotestsum" (if no-color? "--no-color") "--"]
                        args
                        (or *command-line-args* ["./..."]))
            cmd (remove nil? cmd)]
        (run-process cmd {:dir src-dir})))

    (defn go-install
      ([pkg]
       (run-process ["go" "install" pkg] {:dir src-dir})
       (when asdf-go?
         (run-process ["asdf" "reshim" "golang"])))
      ([executable pkg]
       (when (nil? (which executable))
         (go-install pkg)
         (when (nil? (which executable))
           (throw (ex-info "Cannot find the executable installed with go install. Check your PATH"
                           {:executable executable :pkg pkg}))))))
    (defn rs
      [& args]
      (run-process (cons 'rolling-shutter args))))

  -godoc:idx
  {:depends [-install:godoc]
   :task (let [path (src-file "godoc.idx")]
           (when-not (fs/exists? path)
             (run-process '[godoc -index -index_files=godoc.idx -write_index -v] {:dir src-dir}))
           path)}
  ;; the computation of the relative path here seems excessive and it probably is, as it returns
  ;; "../contracts/deployments" unless we're not using the default directory structure.
  -deployments
  (when-not (fs/exists? "deployments" {:nofollow-links true})
    (let [target (-> repo-root (fs/path "contracts" "deployments") str)
          target (fs/relativize (fs/canonicalize ".") target)]
      (log (format "Symlinking deployments -> %s" target))
      (fs/create-sym-link "deployments" target)))

  -oapi-files
  (src-file "collator/oapi/oapi.yaml")

  -sqlc-files
  (fs/glob src-dir "**/sqlc.yaml")

  -sql-files
  (fs/glob src-dir "**.sql")

  -go-files
  (->> (p/process ["go" "list" "-m" "-f={{.Dir}}"]
                  {:out :string
                   :err :string
                   :dir src-dir})
       p/check
       :out
       str/split-lines
       (mapcat (fn [dir]
                 (concat (fs/glob dir "**.go")
                         [(fs/path dir "go.mod") (fs/path dir "go.sum")]))))

  -protoc-files
  (fs/glob src-dir "**.proto")

  -install:protoc-gen-go
  (go-install "protoc-gen-go" "google.golang.org/protobuf/cmd/protoc-gen-go")

  -install:sqlc
  (go-install "sqlc" "github.com/kyleconroy/sqlc/cmd/sqlc")

  -install:stringer
  (go-install "stringer" "golang.org/x/tools/cmd/stringer")

  -install:gotestsum
  (go-install "gotestsum" "gotest.tools/gotestsum@latest")

  -install:abigen
  (go-install "abigen" "github.com/ethereum/go-ethereum/cmd/abigen@v1.12.0")

  -install:oapi-codegen
  (go-install "oapi-codegen" "github.com/deepmap/oapi-codegen/cmd/oapi-codegen")

  -install:godoc
  (go-install "godoc" "golang.org/x/tools/cmd/godoc@latest")

  contracts:install
  {:doc "Run npm install in contracts directory"
   :task (let [node-modules (format "%s/node_modules" contracts-dir)
               marker-file (format "%s/.mark-npm-install" node-modules)
               marker-exists? (fs/exists? marker-file)
               anchor (if marker-exists? marker-file node-modules)]
           ;; we use the marker file instead of node_modules as anchor to speedup the build, since
           ;; node_modules is rather large
           (when (seq (fs/modified-since anchor
                                         [(format "%s/package.json" contracts-dir)
                                          (format "%s/package-lock.json" contracts-dir)]))
             (run-process ["npm" "install"] {:dir contracts-dir})
             (if marker-exists?
               (fs/set-last-modified-time marker-file (System/currentTimeMillis))))
           (when-not marker-exists?
             (fs/create-file marker-file)))}

  contracts:test
  {:doc "Run hardhat tests in contracts directory"
   :depends [contracts:install]
   :task (run-process '[npx hardhat test] {:dir contracts-dir})}

  build:abigen
  {:doc "Generate go bindings for the contracts"
   :depends [contracts:install -install:abigen]
   :task (when (seq (fs/modified-since (format "%s/combined.json" contracts-dir)
                                       (format "%s/src" contracts-dir)))
           (run-process ["node" "scripts/abigen.js"] {:dir contracts-dir}))}

  test
  {:doc "Run tests"
   :depends [-install:gotestsum]
   :task (gotest "-short")}

  test-integration
  {:doc "Run integration tests"
   :depends [-install:gotestsum]
   :task (gotest "-p=1" "-run=Integration" "-count=1")}

  test-all
  {:doc "Run all tests"
   :depends [test test-integration contracts:test]}

  test-system
  {:doc "Run whole system tests"
   :depends [build]
   :task (run-process (apply vector "clojure" "-M:test" *command-line-args*)
                      {:dir (-> repo-root (fs/path "play") str)})}

  lint
  {:doc "Run linter"
   :depends []
   :task (run-process '[golangci-lint run --tests] {:dir src-dir})}

  lint-changes
  {:doc "Show only new linter warnings"
   :depends []
   :task (run-process '[golangci-lint run --new-from-rev origin/main] {:dir src-dir})}

  build:oapi-codegen
  {:doc "Run oapi-codegen"
   :depends [-oapi-files]
   :task (when (seq (fs/modified-since exe -oapi-files))
           (run '-install:oapi-codegen)
           (run '-install:stringer)
           (run-process ["go" "generate" "-x" "./collator/..."] {:dir src-dir}))}

  build:sqlc
  {:doc "Run sqlc"
   :depends [-sqlc-files -sql-files]
   :task (when (and (not windows?)
                    (seq (fs/modified-since exe (concat -sqlc-files -sql-files))))
           (run '-install:sqlc)
           (run-process '[go generate -run="sqlc generate" -x ./...] {:dir src-dir}))}

  build:protoc
  {:doc "Run protoc"
   :depends [-protoc-files]
   :task (when (seq (fs/modified-since exe -protoc-files))
           (run '-install:protoc-gen-go)
           (run-process ["go" "generate" "./shmsg" "./p2pmsg"] {:dir src-dir}))}

  build
  {:doc "Build rolling-shutter executable"
   :depends [build:abigen build:sqlc build:protoc build:oapi-codegen -go-files]
   :task (when (seq (fs/modified-since exe -go-files))
           (run-process (if windows?
                          '[go build -o bin/rolling-shutter.exe]
                          '[make])
                        {:dir src-dir}))}

  build-all
  {:doc "Run all build/compile steps"
   :depends [build contracts:install]}

  ;; --------------------------------------
  ;; -- p2pnode

  -p2pnode-subcommand (play/p2pnode-subcommand)
  -p2pnode-subcommands (mapv play/p2pnode-subcommand (range num-bootstrappers))

  genconfig:p2pnodes
  {:doc "Generate p2pnode config"
   :depends [build -p2pnode-subcommands]
   :task (mapv play/generate-config -p2pnode-subcommands)}

  ;; --------------------------------------
  ;; -- collator

  -collator-subcommand (play/collator-subcommand)

  genconfig:collator
  {:doc "Generate collator config"
   :depends [build -collator-subcommand]
   :task (play/generate-config -collator-subcommand)}

  init:collatordb
  {:doc "Initialize the collator database"
   :depends [build genconfig:collator]
   :task (play/initdb genconfig:collator)}

  -collator
  {:depends [genconfig:collator]
   :doc "Collator addresses"
   :task (-> genconfig:collator :subcommand/cfg :eth-address)}

  collator
  {:doc "Run collator"
   :depends [build genconfig:collator -deployments]
   :task (run-process (play/subcommand-run genconfig:collator))}

  ;; --------------------------------------
  ;; -- keyper
  -keyper-subcommands (mapv play/keyper-subcommand (range num-keypers))

  genconfig:keypers
  {:doc "Generate keyper configs"
   :depends [build -keyper-subcommands]
   :task (mapv play/generate-config -keyper-subcommands)}

  init:kprdb
  {:doc "Initialize the keyper database"
   :depends [build genconfig:keypers]
   :task (mapv play/initdb genconfig:keypers)}

  -keypers
  {:depends [genconfig:keypers]
   :doc "List of keyper addresses"
   :task (mapv (comp :eth-address :subcommand/cfg) genconfig:keypers)}

  ;; --------------------------------------
  ;; -- mocknode

  -mocknode-subcommand
  {:depends []
   :task (play/mocknode-subcommand)}

  genconfig:mock
  {:doc "Generate mocknode config"
   :depends [build -mocknode-subcommand]
   :task (play/generate-config -mocknode-subcommand)}

  ;; --------------------------------------
  ;; -- mocksequencer

  -mocksequencer-subcommand
  {:depends []
   :task (play/mocksequencer-subcommand)}

  genconfig:mocksequencer
  {:doc "Generate mocksequencer config"
   :depends [build -mocksequencer-subcommand]
   :task (play/generate-config -mocksequencer-subcommand)}

  ;; --------------------------------------
  ;; -- general tasks
  genconfig
  {:doc "Generate configs"
   :depends [genconfig:keypers genconfig:mock genconfig:mocksequencer genconfig:p2pnodes]}

  peer
  {:doc "Add the boostrap-nodes adresses to the nodes config"
   :task (let [cfg-files *command-line-args*
               cfgs (map (fn [cfg-file]
                           (let [cfg (play/extract-cfg cfg-file)]
                             (assoc cfg :cfg-file cfg-file :ext-addrs (play/construct-boostrap-addresses cfg))))
                         cfg-files)
               cfgs-by-is-btsrp (group-by (fn [cfg] (= (get cfg :peer-role) "bootstrap")) cfgs)
               bootstr-cfgs (get cfgs-by-is-btsrp true)
               non-bootstr-cfgs (get cfgs-by-is-btsrp false)
               peers (flatten (map (fn [cfg] (get cfg :ext-addrs)) bootstr-cfgs))]
           (doseq [cfg cfgs]
             (toml-edit-file (get cfg :cfg-file) {"CustomBootstrapAddresses" peers})))}

  init:testchain
  {:doc "Initialize the shuttermint testchain directory"
   :depends [build]
   :task (do
           (fs/delete-tree "testchain")
           (rs "chain" "init" "--root" "testchain" "--dev" "--blocktime" "1"))}

  init
  {:doc "Initialize keyper databases as well as shuttermint"
   :depends [genconfig init:testchain init:kprdb init:collatordb]}

  -clone-nitro
  {:doc "Clone the nitro repository"
   :task (when-not (fs/exists? nitro-dir)
           (run-process ["git" "clone" "--recurse-submodules" "-j6"
                         "git@github.com:shutter-network/nitro.git" nitro-dir]))}

  -nitro-clean
  {:doc "Remove nitro docker volumes"
   :task (do
           (run-process '[docker-compose down] {:dir nitro-dir})
           (let [volumes (:Volumes (docker-shutter-nitro-volumes))]
             (doseq [vol volumes
                     :let [n (:Name vol)]]
               (println "Removing docker volume" n)
               (docker-delete-volume n))))}
  nitro
  {:doc "Run nitro"
   :depends [-clone-nitro -nitro-clean]
   :task (let [volumes (:Volumes (docker-shutter-nitro-volumes))
               cmd ["bash" (str (fs/path nitro-dir "test-node.bash"))
                    "--no-blockscout"]
               cmd (if (seq volumes)
                     cmd
                     (conj cmd "--init"))]
           (println "Running" cmd)
           (babashka.process/exec cmd))}

  -deploy-conf
  {:doc "Generate a deploy config"
   :depends [-keypers -collator]
   ;; FIXME keypers is now a list of lists, where
   ;; the first list is the initially deployed keyper set
   :task (let [conf {:keypers [-keypers]
                     :collator -collator
                     :fundValue "100"}
               play-json (str (fs/absolutize "play.json"))]
           (spit play-json (json/encode conf {:pretty true}))
           play-json)}

  godoc
  {:doc "Run godoc"
   :depends [-godoc:idx]
   :task (do
           (print "===============> Starting godoc. Please wait a few seconds for the browser to open!\n")
           (future
             (Thread/sleep 4000)
             (browse/browse-url "http://localhost:6060/"))
           (run-process '[godoc -index -index_files=godoc.idx -http=:6060] {:dir src-dir}))}
  node
  {:doc "Start a hardhat node"
   :depends [-deploy-conf contracts:install]
   :task (run-process '[npx hardhat node] {:extra-env {"DEPLOY_CONF" -deploy-conf}
                                           :dir contracts-dir})}

  chain
  {:doc "Run shuttermint"
   :depends [build]
   :task (rs "chain" "--config" "testchain/config/config.toml")}

  boot
  {:doc "Bootstrap shuttermint node"
   :depends [build -deployments]
   :task (rs "bootstrap")}

  k
  {:doc "Run keyper"
   :depends [build genconfig:keypers -deployments]
   :task (let [n (Integer/parseInt (or (first *command-line-args*) "0"))
               subcommand (nth genconfig:keypers n)
               cmd (play/subcommand-run subcommand)]
           (run-process cmd))}
  p2p
  {:doc "Run p2p bootstrap node"
   :depends [build genconfig:p2pnodes -deployments]
   :task (let [n (Integer/parseInt (or (first *command-line-args*) "0"))
               subcommand (nth genconfig:p2pnodes n)
               cmd (play/subcommand-run subcommand)]
           (run-process cmd))}

  m
  {:doc "Run mocknode"
   :depends [build genconfig:mock]
   :task (run-process (play/subcommand-run genconfig:mock))}

  sequencer
  {:doc "Run mocksequencer"
   :depends [build genconfig:mocksequencer]
   :task (run-process (play/subcommand-run genconfig:mocksequencer))}

  clean
  {:doc "Remove config files and chain related files"
   :depends [-keyper-subcommands -collator-subcommand -p2pnode-subcommands]
   :task (do
           (fs/delete-tree "testchain")
           (doseq [{:subcommand/keys [cfgfile]} (concat -keyper-subcommands
                                                        -p2pnode-subcommands
                                                        [(play/mocknode-subcommand)
                                                         (play/mocksequencer-subcommand)
                                                         -collator-subcommand])]
             (fs/delete-if-exists cfgfile)))}

  upgrade-dependencies
  {:doc "Upgrade dependencies"
   :task (clojure "-M:outdated --upgrade")}

  ci-gen sht.play/ci-gen}}
